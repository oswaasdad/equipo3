from abc import ABC, abstractmethod

class Empleado_J4(ABC):
    def __init__(self, rfc, apellidos, nombres):
        self._rfc = rfc
        self._apellidos = apellidos
        self._nombres = nombres
    def mostrar_informacion(self):
        return f'RFC: {self._rfc}, Apellidos: {self._apellidos}, Nombres: {self._nombres}'
class EmpleadoVendedor(Empleado_J4):
    def __init__(self, rfc, apellidos, nombres, monto_vendido, tasa_comision):
        super().__init__(rfc, apellidos, nombres)
        self._monto_vendido = monto_vendido
        self._tasa_comision = tasa_comision
    def calcular_ingresos(self):
        return self._monto_vendido * self._tasa_comision
    def calcular_bonificacion(self):
        ingresos = self.calcular_ingresos()
        if self._monto_vendido < 1000:
            return 0
        elif 1000 <= self._monto_vendido <= 5000:
            return 0.05 * ingresos
        else:
            return 0.10 * ingresos
    def calcular_descuento(self):
        ingresos = self.calcular_ingresos()
        if ingresos < 1000:
            return 0.11 * ingresos
        else:
            return 0.15 * ingresos
    def calcular_sueldo_neto(self):
        ingresos = self.calcular_ingresos()
        bonificacion = self.calcular_bonificacion()
        descuento = self.calcular_descuento()
        return ingresos + bonificacion - descuento
class EmpleadoPermanente(Empleado_J4):
    def __init__(self, rfc, apellidos, nombres, sueldo_base, numero_seguro_social):
        super().__init__(rfc, apellidos, nombres)
        if sueldo_base < 150:
            raise ValueError("El sueldo base no puede ser menor a 150 pesos.")
        self._sueldo_base = sueldo_base
        self._numero_seguro_social = numero_seguro_social
    def retornar_sueldo_base(self):
        return self._sueldo_base
    def calcular_ingresos(self):
        return self._sueldo_base
    def calcular_descuento(self):
        return 0.11 * self._sueldo_base
    def calcular_sueldo_neto(self):
        ingresos = self.calcular_ingresos()
        descuento = self.calcular_descuento()
        return ingresos - descuento
try:
    vendedor = EmpleadoVendedor("RFC23654", "JUANCHIS", "ERNESTO", 68754, 0.1)
    print(vendedor.mostrar_informacion())
    print("Sueldonetovendedor:", vendedor.calcular_sueldo_neto())

    permanente = EmpleadoPermanente("RFC9856", "MARTINEZ", "GUADALUPE", 200, "12345678")
    print(permanente.mostrar_informacion())
    print("Sueldonetopermanente:", permanente.calcular_sueldo_neto())
except ValueError as e:
    print("Error:", e)
