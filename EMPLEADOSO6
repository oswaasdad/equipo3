from abc import ABC, abstractmethod

class SalarioInvalidoException(Exception):
    def __init__(self, mensaje):
        super().__init__(mensaje)

class Empleado(ABC):
    def __init__(self, rfc, apellidos, nombres):
        self._rfc = rfc
        self._apellidos = apellidos
        self._nombres = nombres

    @abstractmethod
    def mostrar_informacion(self):
        pass

class EmpleadoVendedor(Empleado):
    def __init__(self, rfc, apellidos, nombres, monto_vendido, tasa_comision):
        super().__init__(rfc, apellidos, nombres)
        self.monto_vendido = monto_vendido
        self.tasa_comision = tasa_comision

        if self.calcular_ingresos() < 150:
            raise SalarioInvalidoException("El salario no puede ser menor a $150")

    def calcular_ingresos(self):
        return self.monto_vendido * self.tasa_comision

    def calcular_bonificacion(self):
        ingresos = self.calcular_ingresos()
        if self.monto_vendido < 1000:
            return 0
        elif 1000 <= self.monto_vendido <= 5000:
            return ingresos * 0.05
        else:  
            return ingresos * 0.10

    def calcular_descuento(self):
        ingresos = self.calcular_ingresos()
        if ingresos < 1000:
            return ingresos * 0.11
        else:
            return ingresos * 0.15

    def calcular_sueldo_neto(self):
        ingresos = self.calcular_ingresos()
        bonificacion = self.calcular_bonificacion()
        descuento = self.calcular_descuento()
        return ingresos + bonificacion - descuento

    def mostrar_informacion(self):
        print(f"RFC: {self._rfc}, Apellidos: {self._apellidos}, Nombres: {self._nombres}, "
              f"Monto Vendido: {self.monto_vendido}, Tasa de Comisión: {self.tasa_comision}, "
              f"Sueldo Neto: {self.calcular_sueldo_neto():.2f}")

class EmpleadoPermanente(Empleado):
    def __init__(self, rfc, apellidos, nombres, sueldo_base, numero_seguro_social):
        super().__init__(rfc, apellidos, nombres)
        self.sueldo_base = sueldo_base
        self.numero_seguro_social = numero_seguro_social

        if self.sueldo_base < 150:
            raise SalarioInvalidoException("El salario no puede ser menor a $150")

    def calcular_ingresos(self):
        return self.sueldo_base

    def calcular_descuento(self):
        return self.sueldo_base * 0.11

    def calcular_sueldo_neto(self):
        ingresos = self.calcular_ingresos()
        descuento = self.calcular_descuento()
        return ingresos - descuento

    def mostrar_informacion(self):
        print(f"RFC: {self._rfc}, Apellidos: {self._apellidos}, Nombres: {self._nombres}, "
              f"Sueldo Base: {self.sueldo_base}, Número de Seguro Social: {self.numero_seguro_social}, "
              f"Sueldo Neto: {self.calcular_sueldo_neto():.2f}")

# Ejemplo de uso
try:
    vendedor = EmpleadoVendedor("RFC1111", "garcia", "omar", 2000, 0.1)
    vendedor.mostrar_informacion()

    permanente = EmpleadoPermanente("RFC00000", "Gonzales", "luius", 1800, "123-45-6789")
    permanente.mostrar_informacion()
except SalarioInvalidoException as e:
    print(e)
